// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/26/2024 07:26:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    REGISTER_32BIT
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module REGISTER_32BIT_vlg_sample_tst(
	CLOCK,
	INPUT,
	LOAD,
	PARALLEL,
	sampler_tx
);
input  CLOCK;
input [31:0] INPUT;
input  LOAD;
input [31:0] PARALLEL;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or INPUT or LOAD or PARALLEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module REGISTER_32BIT_vlg_check_tst (
	OUTPUT,
	sampler_rx
);
input [31:0] OUTPUT;
input sampler_rx;

reg [31:0] OUTPUT_expected;

reg [31:0] OUTPUT_prev;

reg [31:0] OUTPUT_expected_prev;

reg [31:0] last_OUTPUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUTPUT_prev = OUTPUT;
end

// update expected /o prevs

always @(trigger)
begin
	OUTPUT_expected_prev = OUTPUT_expected;
end


// expected \OUTPUT [ 31 ]
initial
begin
	OUTPUT_expected[31] = 1'bX;
end 
// expected \OUTPUT [ 30 ]
initial
begin
	OUTPUT_expected[30] = 1'bX;
end 
// expected \OUTPUT [ 29 ]
initial
begin
	OUTPUT_expected[29] = 1'bX;
end 
// expected \OUTPUT [ 28 ]
initial
begin
	OUTPUT_expected[28] = 1'bX;
end 
// expected \OUTPUT [ 27 ]
initial
begin
	OUTPUT_expected[27] = 1'bX;
end 
// expected \OUTPUT [ 26 ]
initial
begin
	OUTPUT_expected[26] = 1'bX;
end 
// expected \OUTPUT [ 25 ]
initial
begin
	OUTPUT_expected[25] = 1'bX;
end 
// expected \OUTPUT [ 24 ]
initial
begin
	OUTPUT_expected[24] = 1'bX;
end 
// expected \OUTPUT [ 23 ]
initial
begin
	OUTPUT_expected[23] = 1'bX;
end 
// expected \OUTPUT [ 22 ]
initial
begin
	OUTPUT_expected[22] = 1'bX;
end 
// expected \OUTPUT [ 21 ]
initial
begin
	OUTPUT_expected[21] = 1'bX;
end 
// expected \OUTPUT [ 20 ]
initial
begin
	OUTPUT_expected[20] = 1'bX;
end 
// expected \OUTPUT [ 19 ]
initial
begin
	OUTPUT_expected[19] = 1'bX;
end 
// expected \OUTPUT [ 18 ]
initial
begin
	OUTPUT_expected[18] = 1'bX;
end 
// expected \OUTPUT [ 17 ]
initial
begin
	OUTPUT_expected[17] = 1'bX;
end 
// expected \OUTPUT [ 16 ]
initial
begin
	OUTPUT_expected[16] = 1'bX;
end 
// expected \OUTPUT [ 15 ]
initial
begin
	OUTPUT_expected[15] = 1'bX;
end 
// expected \OUTPUT [ 14 ]
initial
begin
	OUTPUT_expected[14] = 1'bX;
end 
// expected \OUTPUT [ 13 ]
initial
begin
	OUTPUT_expected[13] = 1'bX;
end 
// expected \OUTPUT [ 12 ]
initial
begin
	OUTPUT_expected[12] = 1'bX;
end 
// expected \OUTPUT [ 11 ]
initial
begin
	OUTPUT_expected[11] = 1'bX;
end 
// expected \OUTPUT [ 10 ]
initial
begin
	OUTPUT_expected[10] = 1'bX;
end 
// expected \OUTPUT [ 9 ]
initial
begin
	OUTPUT_expected[9] = 1'bX;
end 
// expected \OUTPUT [ 8 ]
initial
begin
	OUTPUT_expected[8] = 1'bX;
end 
// expected \OUTPUT [ 7 ]
initial
begin
	OUTPUT_expected[7] = 1'bX;
end 
// expected \OUTPUT [ 6 ]
initial
begin
	OUTPUT_expected[6] = 1'bX;
end 
// expected \OUTPUT [ 5 ]
initial
begin
	OUTPUT_expected[5] = 1'bX;
end 
// expected \OUTPUT [ 4 ]
initial
begin
	OUTPUT_expected[4] = 1'bX;
end 
// expected \OUTPUT [ 3 ]
initial
begin
	OUTPUT_expected[3] = 1'bX;
end 
// expected \OUTPUT [ 2 ]
initial
begin
	OUTPUT_expected[2] = 1'bX;
end 
// expected \OUTPUT [ 1 ]
initial
begin
	OUTPUT_expected[1] = 1'bX;
end 
// expected \OUTPUT [ 0 ]
initial
begin
	OUTPUT_expected[0] = 1'bX;
end 
// generate trigger
always @(OUTPUT_expected or OUTPUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUTPUT = %b | ",OUTPUT_expected_prev);
	$display("| real OUTPUT = %b | ",OUTPUT_prev);
`endif
	if (
		( OUTPUT_expected_prev[0] !== 1'bx ) && ( OUTPUT_prev[0] !== OUTPUT_expected_prev[0] )
		&& ((OUTPUT_expected_prev[0] !== last_OUTPUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[0] = OUTPUT_expected_prev[0];
	end
	if (
		( OUTPUT_expected_prev[1] !== 1'bx ) && ( OUTPUT_prev[1] !== OUTPUT_expected_prev[1] )
		&& ((OUTPUT_expected_prev[1] !== last_OUTPUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[1] = OUTPUT_expected_prev[1];
	end
	if (
		( OUTPUT_expected_prev[2] !== 1'bx ) && ( OUTPUT_prev[2] !== OUTPUT_expected_prev[2] )
		&& ((OUTPUT_expected_prev[2] !== last_OUTPUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[2] = OUTPUT_expected_prev[2];
	end
	if (
		( OUTPUT_expected_prev[3] !== 1'bx ) && ( OUTPUT_prev[3] !== OUTPUT_expected_prev[3] )
		&& ((OUTPUT_expected_prev[3] !== last_OUTPUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[3] = OUTPUT_expected_prev[3];
	end
	if (
		( OUTPUT_expected_prev[4] !== 1'bx ) && ( OUTPUT_prev[4] !== OUTPUT_expected_prev[4] )
		&& ((OUTPUT_expected_prev[4] !== last_OUTPUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[4] = OUTPUT_expected_prev[4];
	end
	if (
		( OUTPUT_expected_prev[5] !== 1'bx ) && ( OUTPUT_prev[5] !== OUTPUT_expected_prev[5] )
		&& ((OUTPUT_expected_prev[5] !== last_OUTPUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[5] = OUTPUT_expected_prev[5];
	end
	if (
		( OUTPUT_expected_prev[6] !== 1'bx ) && ( OUTPUT_prev[6] !== OUTPUT_expected_prev[6] )
		&& ((OUTPUT_expected_prev[6] !== last_OUTPUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[6] = OUTPUT_expected_prev[6];
	end
	if (
		( OUTPUT_expected_prev[7] !== 1'bx ) && ( OUTPUT_prev[7] !== OUTPUT_expected_prev[7] )
		&& ((OUTPUT_expected_prev[7] !== last_OUTPUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[7] = OUTPUT_expected_prev[7];
	end
	if (
		( OUTPUT_expected_prev[8] !== 1'bx ) && ( OUTPUT_prev[8] !== OUTPUT_expected_prev[8] )
		&& ((OUTPUT_expected_prev[8] !== last_OUTPUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[8] = OUTPUT_expected_prev[8];
	end
	if (
		( OUTPUT_expected_prev[9] !== 1'bx ) && ( OUTPUT_prev[9] !== OUTPUT_expected_prev[9] )
		&& ((OUTPUT_expected_prev[9] !== last_OUTPUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[9] = OUTPUT_expected_prev[9];
	end
	if (
		( OUTPUT_expected_prev[10] !== 1'bx ) && ( OUTPUT_prev[10] !== OUTPUT_expected_prev[10] )
		&& ((OUTPUT_expected_prev[10] !== last_OUTPUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[10] = OUTPUT_expected_prev[10];
	end
	if (
		( OUTPUT_expected_prev[11] !== 1'bx ) && ( OUTPUT_prev[11] !== OUTPUT_expected_prev[11] )
		&& ((OUTPUT_expected_prev[11] !== last_OUTPUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[11] = OUTPUT_expected_prev[11];
	end
	if (
		( OUTPUT_expected_prev[12] !== 1'bx ) && ( OUTPUT_prev[12] !== OUTPUT_expected_prev[12] )
		&& ((OUTPUT_expected_prev[12] !== last_OUTPUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[12] = OUTPUT_expected_prev[12];
	end
	if (
		( OUTPUT_expected_prev[13] !== 1'bx ) && ( OUTPUT_prev[13] !== OUTPUT_expected_prev[13] )
		&& ((OUTPUT_expected_prev[13] !== last_OUTPUT_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[13] = OUTPUT_expected_prev[13];
	end
	if (
		( OUTPUT_expected_prev[14] !== 1'bx ) && ( OUTPUT_prev[14] !== OUTPUT_expected_prev[14] )
		&& ((OUTPUT_expected_prev[14] !== last_OUTPUT_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[14] = OUTPUT_expected_prev[14];
	end
	if (
		( OUTPUT_expected_prev[15] !== 1'bx ) && ( OUTPUT_prev[15] !== OUTPUT_expected_prev[15] )
		&& ((OUTPUT_expected_prev[15] !== last_OUTPUT_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[15] = OUTPUT_expected_prev[15];
	end
	if (
		( OUTPUT_expected_prev[16] !== 1'bx ) && ( OUTPUT_prev[16] !== OUTPUT_expected_prev[16] )
		&& ((OUTPUT_expected_prev[16] !== last_OUTPUT_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[16] = OUTPUT_expected_prev[16];
	end
	if (
		( OUTPUT_expected_prev[17] !== 1'bx ) && ( OUTPUT_prev[17] !== OUTPUT_expected_prev[17] )
		&& ((OUTPUT_expected_prev[17] !== last_OUTPUT_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[17] = OUTPUT_expected_prev[17];
	end
	if (
		( OUTPUT_expected_prev[18] !== 1'bx ) && ( OUTPUT_prev[18] !== OUTPUT_expected_prev[18] )
		&& ((OUTPUT_expected_prev[18] !== last_OUTPUT_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[18] = OUTPUT_expected_prev[18];
	end
	if (
		( OUTPUT_expected_prev[19] !== 1'bx ) && ( OUTPUT_prev[19] !== OUTPUT_expected_prev[19] )
		&& ((OUTPUT_expected_prev[19] !== last_OUTPUT_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[19] = OUTPUT_expected_prev[19];
	end
	if (
		( OUTPUT_expected_prev[20] !== 1'bx ) && ( OUTPUT_prev[20] !== OUTPUT_expected_prev[20] )
		&& ((OUTPUT_expected_prev[20] !== last_OUTPUT_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[20] = OUTPUT_expected_prev[20];
	end
	if (
		( OUTPUT_expected_prev[21] !== 1'bx ) && ( OUTPUT_prev[21] !== OUTPUT_expected_prev[21] )
		&& ((OUTPUT_expected_prev[21] !== last_OUTPUT_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[21] = OUTPUT_expected_prev[21];
	end
	if (
		( OUTPUT_expected_prev[22] !== 1'bx ) && ( OUTPUT_prev[22] !== OUTPUT_expected_prev[22] )
		&& ((OUTPUT_expected_prev[22] !== last_OUTPUT_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[22] = OUTPUT_expected_prev[22];
	end
	if (
		( OUTPUT_expected_prev[23] !== 1'bx ) && ( OUTPUT_prev[23] !== OUTPUT_expected_prev[23] )
		&& ((OUTPUT_expected_prev[23] !== last_OUTPUT_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[23] = OUTPUT_expected_prev[23];
	end
	if (
		( OUTPUT_expected_prev[24] !== 1'bx ) && ( OUTPUT_prev[24] !== OUTPUT_expected_prev[24] )
		&& ((OUTPUT_expected_prev[24] !== last_OUTPUT_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[24] = OUTPUT_expected_prev[24];
	end
	if (
		( OUTPUT_expected_prev[25] !== 1'bx ) && ( OUTPUT_prev[25] !== OUTPUT_expected_prev[25] )
		&& ((OUTPUT_expected_prev[25] !== last_OUTPUT_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[25] = OUTPUT_expected_prev[25];
	end
	if (
		( OUTPUT_expected_prev[26] !== 1'bx ) && ( OUTPUT_prev[26] !== OUTPUT_expected_prev[26] )
		&& ((OUTPUT_expected_prev[26] !== last_OUTPUT_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[26] = OUTPUT_expected_prev[26];
	end
	if (
		( OUTPUT_expected_prev[27] !== 1'bx ) && ( OUTPUT_prev[27] !== OUTPUT_expected_prev[27] )
		&& ((OUTPUT_expected_prev[27] !== last_OUTPUT_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[27] = OUTPUT_expected_prev[27];
	end
	if (
		( OUTPUT_expected_prev[28] !== 1'bx ) && ( OUTPUT_prev[28] !== OUTPUT_expected_prev[28] )
		&& ((OUTPUT_expected_prev[28] !== last_OUTPUT_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[28] = OUTPUT_expected_prev[28];
	end
	if (
		( OUTPUT_expected_prev[29] !== 1'bx ) && ( OUTPUT_prev[29] !== OUTPUT_expected_prev[29] )
		&& ((OUTPUT_expected_prev[29] !== last_OUTPUT_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[29] = OUTPUT_expected_prev[29];
	end
	if (
		( OUTPUT_expected_prev[30] !== 1'bx ) && ( OUTPUT_prev[30] !== OUTPUT_expected_prev[30] )
		&& ((OUTPUT_expected_prev[30] !== last_OUTPUT_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[30] = OUTPUT_expected_prev[30];
	end
	if (
		( OUTPUT_expected_prev[31] !== 1'bx ) && ( OUTPUT_prev[31] !== OUTPUT_expected_prev[31] )
		&& ((OUTPUT_expected_prev[31] !== last_OUTPUT_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTPUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTPUT_expected_prev);
		$display ("     Real value = %b", OUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUTPUT_exp[31] = OUTPUT_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module REGISTER_32BIT_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg [31:0] INPUT;
reg LOAD;
reg [31:0] PARALLEL;
// wires                                               
wire [31:0] OUTPUT;

wire sampler;                             

// assign statements (if any)                          
REGISTER_32BIT i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.\INPUT (INPUT),
	.LOAD(LOAD),
	.\OUTPUT (OUTPUT),
	.PARALLEL(PARALLEL)
);

// CLOCK
initial
begin
	CLOCK = 1'b0;
	CLOCK = #50000 1'b1;
	CLOCK = #20000 1'b0;
	CLOCK = #30000 1'b1;
	CLOCK = #40000 1'b0;
end 
// \INPUT [ 31 ]
initial
begin
	INPUT[31] = 1'b0;
end 
// \INPUT [ 30 ]
initial
begin
	INPUT[30] = 1'b0;
end 
// \INPUT [ 29 ]
initial
begin
	INPUT[29] = 1'b0;
end 
// \INPUT [ 28 ]
initial
begin
	INPUT[28] = 1'b0;
end 
// \INPUT [ 27 ]
initial
begin
	INPUT[27] = 1'b0;
end 
// \INPUT [ 26 ]
initial
begin
	INPUT[26] = 1'b0;
end 
// \INPUT [ 25 ]
initial
begin
	INPUT[25] = 1'b0;
end 
// \INPUT [ 24 ]
initial
begin
	INPUT[24] = 1'b0;
end 
// \INPUT [ 23 ]
initial
begin
	INPUT[23] = 1'b0;
end 
// \INPUT [ 22 ]
initial
begin
	INPUT[22] = 1'b0;
end 
// \INPUT [ 21 ]
initial
begin
	INPUT[21] = 1'b0;
end 
// \INPUT [ 20 ]
initial
begin
	INPUT[20] = 1'b0;
end 
// \INPUT [ 19 ]
initial
begin
	INPUT[19] = 1'b0;
end 
// \INPUT [ 18 ]
initial
begin
	INPUT[18] = 1'b0;
end 
// \INPUT [ 17 ]
initial
begin
	INPUT[17] = 1'b0;
end 
// \INPUT [ 16 ]
initial
begin
	INPUT[16] = 1'b0;
end 
// \INPUT [ 15 ]
initial
begin
	INPUT[15] = 1'b0;
end 
// \INPUT [ 14 ]
initial
begin
	INPUT[14] = 1'b0;
end 
// \INPUT [ 13 ]
initial
begin
	INPUT[13] = 1'b0;
end 
// \INPUT [ 12 ]
initial
begin
	INPUT[12] = 1'b0;
end 
// \INPUT [ 11 ]
initial
begin
	INPUT[11] = 1'b0;
end 
// \INPUT [ 10 ]
initial
begin
	INPUT[10] = 1'b0;
end 
// \INPUT [ 9 ]
initial
begin
	INPUT[9] = 1'b0;
end 
// \INPUT [ 8 ]
initial
begin
	INPUT[8] = 1'b0;
end 
// \INPUT [ 7 ]
initial
begin
	INPUT[7] = 1'b0;
end 
// \INPUT [ 6 ]
initial
begin
	INPUT[6] = 1'b0;
end 
// \INPUT [ 5 ]
initial
begin
	INPUT[5] = 1'b0;
end 
// \INPUT [ 4 ]
initial
begin
	INPUT[4] = 1'b0;
end 
// \INPUT [ 3 ]
initial
begin
	INPUT[3] = 1'b0;
	INPUT[3] = #90000 1'b1;
	INPUT[3] = #50000 1'b0;
end 
// \INPUT [ 2 ]
initial
begin
	INPUT[2] = 1'b0;
end 
// \INPUT [ 1 ]
initial
begin
	INPUT[1] = 1'b0;
	INPUT[1] = #90000 1'b1;
	INPUT[1] = #50000 1'b0;
end 
// \INPUT [ 0 ]
initial
begin
	INPUT[0] = 1'b0;
end 

// LOAD
initial
begin
	LOAD = 1'b1;
	LOAD = #150000 1'b0;
end 
// PARALLEL[ 31 ]
initial
begin
	PARALLEL[31] = 1'b0;
end 
// PARALLEL[ 30 ]
initial
begin
	PARALLEL[30] = 1'b0;
end 
// PARALLEL[ 29 ]
initial
begin
	PARALLEL[29] = 1'b0;
end 
// PARALLEL[ 28 ]
initial
begin
	PARALLEL[28] = 1'b0;
end 
// PARALLEL[ 27 ]
initial
begin
	PARALLEL[27] = 1'b0;
end 
// PARALLEL[ 26 ]
initial
begin
	PARALLEL[26] = 1'b0;
end 
// PARALLEL[ 25 ]
initial
begin
	PARALLEL[25] = 1'b0;
end 
// PARALLEL[ 24 ]
initial
begin
	PARALLEL[24] = 1'b0;
end 
// PARALLEL[ 23 ]
initial
begin
	PARALLEL[23] = 1'b0;
end 
// PARALLEL[ 22 ]
initial
begin
	PARALLEL[22] = 1'b0;
end 
// PARALLEL[ 21 ]
initial
begin
	PARALLEL[21] = 1'b0;
end 
// PARALLEL[ 20 ]
initial
begin
	PARALLEL[20] = 1'b0;
end 
// PARALLEL[ 19 ]
initial
begin
	PARALLEL[19] = 1'b0;
end 
// PARALLEL[ 18 ]
initial
begin
	PARALLEL[18] = 1'b0;
end 
// PARALLEL[ 17 ]
initial
begin
	PARALLEL[17] = 1'b0;
end 
// PARALLEL[ 16 ]
initial
begin
	PARALLEL[16] = 1'b0;
end 
// PARALLEL[ 15 ]
initial
begin
	PARALLEL[15] = 1'b0;
end 
// PARALLEL[ 14 ]
initial
begin
	PARALLEL[14] = 1'b0;
end 
// PARALLEL[ 13 ]
initial
begin
	PARALLEL[13] = 1'b0;
end 
// PARALLEL[ 12 ]
initial
begin
	PARALLEL[12] = 1'b0;
end 
// PARALLEL[ 11 ]
initial
begin
	PARALLEL[11] = 1'b0;
end 
// PARALLEL[ 10 ]
initial
begin
	PARALLEL[10] = 1'b0;
end 
// PARALLEL[ 9 ]
initial
begin
	PARALLEL[9] = 1'b0;
end 
// PARALLEL[ 8 ]
initial
begin
	PARALLEL[8] = 1'b0;
end 
// PARALLEL[ 7 ]
initial
begin
	PARALLEL[7] = 1'b0;
end 
// PARALLEL[ 6 ]
initial
begin
	PARALLEL[6] = 1'b0;
end 
// PARALLEL[ 5 ]
initial
begin
	PARALLEL[5] = 1'b0;
end 
// PARALLEL[ 4 ]
initial
begin
	PARALLEL[4] = 1'b0;
end 
// PARALLEL[ 3 ]
initial
begin
	PARALLEL[3] = 1'b0;
end 
// PARALLEL[ 2 ]
initial
begin
	PARALLEL[2] = 1'b0;
end 
// PARALLEL[ 1 ]
initial
begin
	PARALLEL[1] = 1'b0;
end 
// PARALLEL[ 0 ]
initial
begin
	PARALLEL[0] = 1'b0;
end 

REGISTER_32BIT_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.INPUT(INPUT),
	.LOAD(LOAD),
	.PARALLEL(PARALLEL),
	.sampler_tx(sampler)
);

REGISTER_32BIT_vlg_check_tst tb_out(
	.OUTPUT(OUTPUT),
	.sampler_rx(sampler)
);
endmodule

